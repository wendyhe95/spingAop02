<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!--1 创建目标类-->
    <bean id="userServiceId" class="com.springaop.xml.UserServiceImpl" ></bean>

    <!--2 创建切面类-->
    <bean id="myAspectId"  class="com.springaop.xml.MyAspect"></bean>

    <!--3 aop编程
         <aop:aspect>将切面类声明为切面   从而可以获取通知（方法）
                ref切面类的引用
         <aop:pointcut>声明一个切入点  所有的通知都可以使用
    -->
    <aop:config>
        <aop:aspect ref="myAspectId">
            <aop:pointcut id="myPointCut" expression="execution(* com.springaop.xml.UserServiceImpl.*(..))"/>

            <!--3.1 前置通知
                <aop:before method="" pointcut="" pointcut-ref=""/>
                method：通知及方法
                pointcut：切入点表达式  次表达式只能当前的通知使用
                pointcut-ref：切入点的引用  可以与其他通知共享切入点

                * 通知方法可以有参数
                    public void myBefore(JoinPoint joinPoint){}
                        参数1：org.aspectj.lang.JoinPoint  用于描述连接点(目标方法) 获得当前目标方法的方法名
            -->
            <!--<aop:before method="myBefore" pointcut-ref="myPointCut"/>-->

            <!--3.2 后置通知
                <aop:after-returning  method="" pointcut-ref="" returning=""/>
                method：通知及方法
                pointcut-ref：切入点的引用  可以与其他通知共享切入点
                returning：通知方法第二个参数的名称

                * 通知方法可以有参数
                       public void myAfterReturning(JoinPoint joinPoint,Object ret){}
                        参数1：org.aspectj.lang.JoinPoint  用于描述连接点(目标方法) 获得当前目标方法的方法名
                        参数2：类型Object  参数名由returning配置的
            -->
            <!--<aop:after-returning  method="myAfterReturning" pointcut-ref="myPointCut" returning="ret"/>-->

            <!--3.3 环绕通知
                <aop:around method="" pointcut-ref=""/>
                method：通知及方法
                pointcut-ref：切入点的引用  可以与其他通知共享切入点

                * 通知方法可以有参数
                    public Object myAround(ProceedingJoinPoint joinPoint) throws Throwable{}
                        1 返回值类型必须为Object
                        2 方法名任意
                        3 参数必须为org.aspectj.lang.ProceedingJoinPoint;
                        4 需要抛出异常

                执行目标方法：Object obj = joinPoint.proceed();

            -->
            <!--<aop:around method="myAround" pointcut-ref="myPointCut"/>-->



            <!-- 3.4 抛出异常通知
            <aop:after-throwing method="" pointcut-ref="" throwing=""/>
                method：通知及方法
                pointcut-ref：切入点的引用  可以与其他通知共享切入点
                throwing: 通知方法第二个参数的名称

                * 通知方法可以有参数
                    public void myAfterThrowing(JoinPoint joinPoint,Throwable e){}
                        参数1：org.aspectj.lang.JoinPoint  用于描述连接点(目标方法) 获得当前目标方法的方法名
                        参数2：获得异常信息 类型Throwable  参数名由throwing="e"配置
            -->
            <!--<aop:after-throwing method="myAfterThrowing" pointcut-ref="myPointCut" throwing="e"/>-->


            <!-- 3.5 最终通知
            <aop:after method="" pointcut-ref=""/>
                method：通知及方法
                pointcut-ref：切入点的引用  可以与其他通知共享切入点

                * 通知方法可以有参数
                    public void myAfterThrowing(JoinPoint joinPoint){}
                        参数1：org.aspectj.lang.JoinPoint  用于描述连接点(目标方法) 获得当前目标方法的方法名
            -->
            <aop:after method="myAfter" pointcut-ref="myPointCut"/>

        </aop:aspect>

    </aop:config>





</beans>